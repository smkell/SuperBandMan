{"Name":"Microsoft Band SDK Preview","Id":1673,"Alias":"microsoft-band-sdk","Description":"# Microsoft Band SDK Preview\n\nThe Microsoft Band SDK Preview gives developers access to the sensors available on the band, as well as the ability to create and send notifications to tiles. Enhance and extend the experience of your applications to your customers\u0027 wrists.\n\n## Amazing App Experiences\nExtend the experience of your application to your users\u0027 wrists via a new dimension of interaction. Create an app that can send UI content to the band, keeping users engaged when they\u0027re in motion. Your app can also receive data directly from the band sensors, giving your users more reasons to interact with it. Create a personalized, data-rich, custom experience and enhanced scenarios that will engage users in ways only possible with Microsoft Band.\n\n### Access Sensors\nUse a range of sensors including heart rate, UV, accelerometer, gyroscope, and skin temperature, as well as fitness data, to design cutting-edge user experiences:\n\n - **Accelerometer**  \n   Provides X, Y, and Z acceleration in meters per second squared (m/s2) units.\n - **Gyroscope**  \n   Provides X, Y, and Z angular velocity in degrees per second (°/sec) units.\n - **Distance**  \n   Provides the total distance in centimeters, current speed in centimeters per second (cm/s), current pace in milliseconds per meter (ms/m), and the current pedometer mode (such as walking or running).\n - **Heart Rate**  \n   Provides the number of beats per minute, also indicates if the heart rate sensor is fully locked onto the wearer’s heart rate.\n - **Pedometer**  \n   Provides the total number of steps the wearer has taken.\n - **Skin Temperature**  \n   Provides the current skin temperature of the wearer in degrees Celius.\n - **UV**  \n   Provides the current ultra violet radition exposure intensity.\n - **Device Contact**  \n   Provides a way to let the developer know if someone is currently wearing the device.\n\n### Create App Tiles\nKeep users engaged and extend your app experience to Microsoft Band. Create tiles for the band that send glanceable notifications from your app to your users.\n\nEach app tile is visually represented on the Start Strip by an icon, and when a new notification arrives, the icon is scaled down and a number badge appears on the tile. App notifications come in two flavors:\n\n - **Dialogs**  \n   Dialog notifications are popups meant to quickly display information to the user. Once the user dismisses the dialog, the information contained therein does not persist on the Band.\n - **Messages**  \n   Message notifications are sent and stored in a specific tile, and a tile can keep up to 8\nmessages at a time. Messages may display a dialog as well.\nBoth notifications types contain a title text and a body text.\n\n### Personalize Device\nMonetize your app by offering users ways to customize the band. Change the color theme, or bring the Me Tile to life by changing the wallpaper.\n\n## SDK API Usage\n\nMore advanced documentation can be found on the [Microsoft Band Developers Page][1].\n\n### Requirements\n\n#### Android 4.2+\n1. Permission to access Bluetooth:  \n   `[assembly: UsesPermission(Android.Manifest.Permission.Bluetooth)]`\n2. Permission to access the Band service:  \n   `[assembly: UsesPermission(Microsoft.Band.BandClientManager.BindBandService)]`\n\n#### Windows Phone 8.1+ \u0026 Windows 8.1+ (Windows Runtime)\n1. You will also need to add the Proximity capability:  \n![Capabilities][2]\n2. Permission to access Bluetooth:  \n\n```\n\u003cDeviceCapability Name=\"bluetooth.rfcomm\"\u003e\n  \u003cDevice Id=\"any\"\u003e\n    \u003c!-- Used by the Microsoft Band SDK Preview --\u003e\n    \u003cFunction Type=\"serviceId:A502CA9A-2BA5-413C-A4E0-13804E47B38F\" /\u003e\n    \u003c!-- Used by the Microsoft Band SDK Preview --\u003e\n    \u003cFunction Type=\"serviceId:C742E1A2-6320-5ABC-9643-D206C677E580\" /\u003e\n  \u003c/Device\u003e\n\u003c/m2:DeviceCapability\u003e\n```\n\n#### iOS 7+\n\n1. Automatically adds the CoreBluetooth framework.\n2. In order for the app to communicate with the Band in the background, \"Use Bluetooth LE Accessories\" must be enabled in Background Modes.\n\n### Connecting to a Band\n\n\n#### Android\n\n```\nvar pairedBands = BandClientManager.Instance.GetPairedBands();\nvar bandClient = BandClientManager.Instance.Create(this, pairedBands[0]);\nawait bandClient.ConnectTaskAsync();\n```\n\n#### Windows \n\n```\nvar pairedBands = await BandClientManager.Instance.GetBandsAsync();\nvar bandClient = await BandClientManager.Instance.ConnectAsync(pairedBands[0]);\n```\n\n#### iOS\n\n```\nvar manager = BandClientManager.SharedManager;\nvar client = manager.AttachedClients.FirstOrDefault ();\nif (client == null) {\n  // error: No Bands attached.\n} else {\n  manager.Connect(client);\n}\n```\n\n### Connecting the a Sensor\n\n\n#### Android\n\n```\n// get the sensor\nvar accelerometer = bandClient.SensorManager.CreateAccelerometerSensor();\n// add a handler\naccelerometer.ReadingChanged += (o, args) =\u003e {\n  var yReading = args.SensorReading.AccelerationY;\n};\n// start reading, with the interval\nawait accelerometer.StartReadingsTaskAsync(SampleRate.Ms16);\n// stop reading\nawait accelerometer.StopReadingsTaskAsync();\n```\n\n#### Windows\n\n```\n// get the sensor\nvar accelerometer = bandclient.SensorManager.Accelerometer;\n// set the interval\naccelerometer.ReportingInterval = TimeSpan.FromMilliseconds(16);\n// add a handler\naccelerometer.ReadingChanged += (o, args) =\u003e {\n  var yReading = args.SensorReading.AccelerationY;\n};\n// start reading\nawait accelerometer.StartReadingsAsync();\n// stop reading\nawait accelerometer.StopReadingsAsync();\n```\n\n#### iOS\n\n```\n// start listening to the sensor with a callback\nNSError queueError;\nclient.SensorManager.StartAccelerometerUpdates(null, out queueError, (data, error) =\u003e {\n  var yReading = data.Y;\n});\n```\n\n### Working with Tiles\n\n#### Android\n\n```\n// get the tiles\nvar tiles = await bandClient.TileManager.GetTilesTaskAsync();\n// the the number of tiles we can add\nvar capacity = await bandClient.TileManager.GetRemainingTileCapacityTaskAsync();\n// create a new tile\nvar tile = \n  new BandTile.Builder(tileUuid, \"TileName\", tileIcon)\n  .SetTileSmallIcon(smallIcon)\n  .Build();\n// add the tile\nawait bandClient.TileManager.AddTileTaskAsync(this, tile);\n// remove the tile\nawait bandClient.TileManager.RemoveTileTaskAsync(tile);\n```\n\n#### Windows\n\n```\n// get the tiles\nvar tiles = await bandClient.TileManager.GetTilesAsync();\n// the the number of tiles we can add\nvar capacity = await bandClient.TileManager.GetRemainingTileCapacityAsync();\n// create a new tile\nvar tile = new BandTile(tileGuid) {\n  IsBadgingEnabled = true,\n  Name = \"TileName\",\n  SmallIcon = smallIcon,\n  TileIcon = tileIcon\n};\n// add the tile\nawait bandClient.TileManager.AddTileAsync(tile);\n// remove the tile\nawait bandClient.TileManager.RemoveTileAsync(tile);\n```\n\n#### iOS\n\n```\n// get the tiles\nclient.TileManager.GetTiles ((tiles, tileError) =\u003e {\n  // tiles contains the collection of app tiles\n});\nclient.TileManager.RemainingTileCapacity((capacity, error) =\u003e {\n  // capacity contains the value of the remaining spaces\n});\n// create the tile\nNSError operationError;\nvar tile = BandTile.Create(\n  new NSUuid (\"DCBABA9F-12FD-47A5-83A9-E7270A4399BB\",\n  \"B tile\",\n  BandIcon.FromUIImage (UIImage.FromBundle (\"B.png\"), out operationError), \n  BandIcon.FromUIImage (UIImage.FromBundle (\"Bb.png\"), out operationError), \n  out operationError);\n// add the tile\nclient.TileManager.AddTile(tile, error =\u003e { });\n// remove the tile\nclient.TileManager.RemoveTile (tileId, error =\u003e { });\n```\n\n### Send a Message\n\n#### Android\n\n```\nawait bandClient.NotificationManager.SendMessageTaskAsync(\n  tileGuid, \n  \"Message title\", \n  \"Message body\", \n  DateTime.Now,\n  MessageFlags.ShowDialog);\n```\n\n#### Windows \n\n```\nawait bandClient.NotificationManager.SendMessageAsync(\n  tileGuid, \n  \"Message title\", \n  \"Message body\", \n  DateTimeOffset.Now, \n  MessageFlags.ShowDialog);\n```\n\n#### iOS\n\n```\nclient.NotificationManager.SendMessage(\n  tileId, \n  \"Message title\", \n  \"Message body\", \n  NSDate.Now, \n  BandNotificationMessageFlags.ShowDialog, \n  error =\u003e { });\n```\n\n\n[1]:http://developer.microsoftband.com/\n[2]:https://raw.githubusercontent.com/mattleibow/Microsoft-Band-SDK-Bindings/master/Images/capabilities.png","Version":"1.3.1","Summary":"Extend the experience of your application to your users\u0027 wrists via a new dimension of interaction.","QuickStart":"# Microsoft Band SDK Preview\n\nThe Microsoft Band SDK Preview gives developers access to the sensors available on the band, as well as the ability to create and send notifications to tiles. Enhance and extend the experience of your applications to your customers\u0027 wrists.\n\n## Amazing App Experiences\nExtend the experience of your application to your users\u0027 wrists via a new dimension of interaction. Create an app that can send UI content to the band, keeping users engaged when they\u0027re in motion. Your app can also receive data directly from the band sensors, giving your users more reasons to interact with it. Create a personalized, data-rich, custom experience and enhanced scenarios that will engage users in ways only possible with Microsoft Band.\n\n### Access Sensors\nUse a range of sensors including heart rate, UV, accelerometer, gyroscope, and skin temperature, as well as fitness data, to design cutting-edge user experiences:\n\n - **Accelerometer**  \n   Provides X, Y, and Z acceleration in meters per second squared (m/s2) units.\n - **Gyroscope**  \n   Provides X, Y, and Z angular velocity in degrees per second (°/sec) units.\n - **Distance**  \n   Provides the total distance in centimeters, current speed in centimeters per second (cm/s), current pace in milliseconds per meter (ms/m), and the current pedometer mode (such as walking or running).\n - **Heart Rate**  \n   Provides the number of beats per minute, also indicates if the heart rate sensor is fully locked onto the wearer’s heart rate.\n - **Pedometer**  \n   Provides the total number of steps the wearer has taken.\n - **Skin Temperature**  \n   Provides the current skin temperature of the wearer in degrees Celius.\n - **UV**  \n   Provides the current ultra violet radition exposure intensity.\n - **Device Contact**  \n   Provides a way to let the developer know if someone is currently wearing the device.\n\n### Create App Tiles\nKeep users engaged and extend your app experience to Microsoft Band. Create tiles for the band that send glanceable notifications from your app to your users.\n\nEach app tile is visually represented on the Start Strip by an icon, and when a new notification arrives, the icon is scaled down and a number badge appears on the tile. App notifications come in two flavors:\n\n - **Dialogs**  \n   Dialog notifications are popups meant to quickly display information to the user. Once the user dismisses the dialog, the information contained therein does not persist on the Band.\n - **Messages**  \n   Message notifications are sent and stored in a specific tile, and a tile can keep up to 8\nmessages at a time. Messages may display a dialog as well.\nBoth notifications types contain a title text and a body text.\n\n### Personalize Device\nMonetize your app by offering users ways to customize the band. Change the color theme, or bring the Me Tile to life by changing the wallpaper.\n\n## SDK API Usage\n\nMore advanced documentation can be found on the [Microsoft Band Developers Page][1].\n\n### Requirements\n\n#### Android 4.2+\n1. Permission to access Bluetooth:  \n   `[assembly: UsesPermission(Android.Manifest.Permission.Bluetooth)]`\n2. Permission to access the Band service:  \n   `[assembly: UsesPermission(Microsoft.Band.BandClientManager.BindBandService)]`\n\n#### Windows Phone 8.1+ \u0026 Windows 8.1+ (Windows Runtime)\n1. You will also need to add the Proximity capability:  \n![Capabilities][2]\n2. Permission to access Bluetooth:  \n\n```\n\u003cDeviceCapability Name=\"bluetooth.rfcomm\"\u003e\n  \u003cDevice Id=\"any\"\u003e\n    \u003c!-- Used by the Microsoft Band SDK Preview --\u003e\n    \u003cFunction Type=\"serviceId:A502CA9A-2BA5-413C-A4E0-13804E47B38F\" /\u003e\n    \u003c!-- Used by the Microsoft Band SDK Preview --\u003e\n    \u003cFunction Type=\"serviceId:C742E1A2-6320-5ABC-9643-D206C677E580\" /\u003e\n  \u003c/Device\u003e\n\u003c/m2:DeviceCapability\u003e\n```\n\n#### iOS 7+\n\n1. Automatically adds the CoreBluetooth framework.\n2. In order for the app to communicate with the Band in the background, \"Use Bluetooth LE Accessories\" must be enabled in Background Modes.\n\n### Connecting to a Band\n\n\n#### Android\n\n```\nvar pairedBands = BandClientManager.Instance.GetPairedBands();\nvar bandClient = BandClientManager.Instance.Create(this, pairedBands[0]);\nawait bandClient.ConnectTaskAsync();\n```\n\n#### Windows \n\n```\nvar pairedBands = await BandClientManager.Instance.GetBandsAsync();\nvar bandClient = await BandClientManager.Instance.ConnectAsync(pairedBands[0]);\n```\n\n#### iOS\n\n```\nvar manager = BandClientManager.SharedManager;\nvar client = manager.AttachedClients.FirstOrDefault ();\nif (client == null) {\n  // error: No Bands attached.\n} else {\n  manager.Connect(client);\n}\n```\n\n### Connecting the a Sensor\n\n\n#### Android\n\n```\n// get the sensor\nvar accelerometer = bandClient.SensorManager.CreateAccelerometerSensor();\n// add a handler\naccelerometer.ReadingChanged += (o, args) =\u003e {\n  var yReading = args.SensorReading.AccelerationY;\n};\n// start reading, with the interval\nawait accelerometer.StartReadingsTaskAsync(SampleRate.Ms16);\n// stop reading\nawait accelerometer.StopReadingsTaskAsync();\n```\n\n#### Windows\n\n```\n// get the sensor\nvar accelerometer = bandclient.SensorManager.Accelerometer;\n// set the interval\naccelerometer.ReportingInterval = TimeSpan.FromMilliseconds(16);\n// add a handler\naccelerometer.ReadingChanged += (o, args) =\u003e {\n  var yReading = args.SensorReading.AccelerationY;\n};\n// start reading\nawait accelerometer.StartReadingsAsync();\n// stop reading\nawait accelerometer.StopReadingsAsync();\n```\n\n#### iOS\n\n```\n// start listening to the sensor with a callback\nNSError queueError;\nclient.SensorManager.StartAccelerometerUpdates(null, out queueError, (data, error) =\u003e {\n  var yReading = data.Y;\n});\n```\n\n### Working with Tiles\n\n#### Android\n\n```\n// get the tiles\nvar tiles = await bandClient.TileManager.GetTilesTaskAsync();\n// the the number of tiles we can add\nvar capacity = await bandClient.TileManager.GetRemainingTileCapacityTaskAsync();\n// create a new tile\nvar tile = \n  new BandTile.Builder(tileUuid, \"TileName\", tileIcon)\n  .SetTileSmallIcon(smallIcon)\n  .Build();\n// add the tile\nawait bandClient.TileManager.AddTileTaskAsync(this, tile);\n// remove the tile\nawait bandClient.TileManager.RemoveTileTaskAsync(tile);\n```\n\n#### Windows\n\n```\n// get the tiles\nvar tiles = await bandClient.TileManager.GetTilesAsync();\n// the the number of tiles we can add\nvar capacity = await bandClient.TileManager.GetRemainingTileCapacityAsync();\n// create a new tile\nvar tile = new BandTile(tileGuid) {\n  IsBadgingEnabled = true,\n  Name = \"TileName\",\n  SmallIcon = smallIcon,\n  TileIcon = tileIcon\n};\n// add the tile\nawait bandClient.TileManager.AddTileAsync(tile);\n// remove the tile\nawait bandClient.TileManager.RemoveTileAsync(tile);\n```\n\n#### iOS\n\n```\n// get the tiles\nclient.TileManager.GetTiles ((tiles, tileError) =\u003e {\n  // tiles contains the collection of app tiles\n});\nclient.TileManager.RemainingTileCapacity((capacity, error) =\u003e {\n  // capacity contains the value of the remaining spaces\n});\n// create the tile\nNSError operationError;\nvar tile = BandTile.Create(\n  new NSUuid (\"DCBABA9F-12FD-47A5-83A9-E7270A4399BB\",\n  \"B tile\",\n  BandIcon.FromUIImage (UIImage.FromBundle (\"B.png\"), out operationError), \n  BandIcon.FromUIImage (UIImage.FromBundle (\"Bb.png\"), out operationError), \n  out operationError);\n// add the tile\nclient.TileManager.AddTile(tile, error =\u003e { });\n// remove the tile\nclient.TileManager.RemoveTile (tileId, error =\u003e { });\n```\n\n### Send a Message\n\n#### Android\n\n```\nawait bandClient.NotificationManager.SendMessageTaskAsync(\n  tileGuid, \n  \"Message title\", \n  \"Message body\", \n  DateTime.Now,\n  MessageFlags.ShowDialog);\n```\n\n#### Windows \n\n```\nawait bandClient.NotificationManager.SendMessageAsync(\n  tileGuid, \n  \"Message title\", \n  \"Message body\", \n  DateTimeOffset.Now, \n  MessageFlags.ShowDialog);\n```\n\n#### iOS\n\n```\nclient.NotificationManager.SendMessage(\n  tileId, \n  \"Message title\", \n  \"Message body\", \n  NSDate.Now, \n  BandNotificationMessageFlags.ShowDialog, \n  error =\u003e { });\n```\n\n\n[1]:http://developer.microsoftband.com/\n[2]:https://raw.githubusercontent.com/mattleibow/Microsoft-Band-SDK-Bindings/master/Images/capabilities.png","Hash":"e745550fd681814b2bd50e9de0e25996","TargetPlatforms":["ios","android"],"TrialHash":null}